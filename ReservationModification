public class MainScreen {

     public void Edit_Kratisi()
      {
    EditKratisiScreen screen = new EditKratisiScreen();
        screen.display(); // This opens the new screen
      }


} //End of  MainScreen






public class BookingScreen {

 private JFrame frame;
    private JComboBox<String> comboBox;
    private List<String> bookings = new ArrayList<>();

     public void display()
    {
frame = new JFrame("Booking Screen");
        JLabel label = new JLabel("Choose a booking:");

        comboBox = new JComboBox<>(); // Empty initially

        JButton submitButton = new JButton("Submit");
        submitButton.addActionListener(e -> chooses_kratisi_and_submit());

        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.add(label);
        panel.add(comboBox);
        panel.add(submitButton);

        frame.add(panel);
        frame.setSize(300, 200);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  }

    public chooses_kratisi_and_submit()
     {  
 // Split the input string by commas and fill the combo box
        String[] items = kratisi.split(",");
        bookings.clear();
        comboBox.removeAllItems();

        for (String item : items) {
            bookings.add(item.trim());
            comboBox.addItem(item.trim());
        }

     }

   
 
     public send_results(String kratisi) 
      {

 // Split the input string by commas and fill the combo box
        String[] items = kratisi.split(",");
        bookings.clear();
        comboBox.removeAllItems();

        for (String item : items) {
            bookings.add(item.trim());
            comboBox.addItem(item.trim());
        }

      }

}  // End of BookingScreen





public class EditBookingScreen {

 private JFrame frame;
    private JTextField pickupDateField;
    private JTextField dropOffLocationField;

     public void display()
    {

  frame = new JFrame("Edit Booking Screen"); // New Screen name

        JLabel label1 = new JLabel("New Pickup Date:");
        pickupDateField = new JTextField(15);

        JLabel label2 = new JLabel("New Drop-off Location:");
        dropOffLocationField = new JTextField(15);

        JButton submitButton = new JButton("Submit Changes");
        submitButton.addActionListener(e -> chooses_changes_and_submit());

        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.add(label1);
        panel.add(pickupDateField);
        panel.add(label2);
        panel.add(dropOffLocationField);
        panel.add(submitButton);

        frame.add(panel);
        frame.setSize(300, 250);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

     public chooses_changes_and_submit()
    {
   String newPickupDate = pickupDateField.getText();
        String newDropOffLocation = dropOffLocationField.getText();

        // Very simple: just print or use these values
        System.out.println("New Pickup Date: " + newPickupDate);
        System.out.println("New Drop-off Location: " + newDropOffLocation);

        // Optionally close the window
        frame.dispose();

    }



} // End of Edit Booking Screen






public class ManageSearch {

 private List<String> submittedUsernames = new ArrayList<>();
    private List<String> submittedPasswords = new ArrayList<>();

 private List<String> bookings = new ArrayList<>();
    private String proposedPickupDate;
    private String proposedDropOffLocation;

       public void ask_for_kratiseis()
     {
  System.out.println("Stored bookings:");
        for (String booking : bookings) {
            System.out.println(booking);
        }

     }

    public void send_changes(String newPickupDate, String newDropOffLocation) 
{
        // Store the proposed changes
        this.proposedPickupDate = newPickupDate;
        this.proposedDropOffLocation = newDropOffLocation;

        System.out.println("Received proposed changes:");
        System.out.println("New Pickup Date: " + newPickupDate);
        System.out.println("New Drop-off Location: " + newDropOffLocation);
    }


          public boolean valid_and_available()
         {
 // Check if proposed changes are not null or empty
    if (proposedPickupDate == null || proposedPickupDate.isEmpty()) {
        System.out.println("Pickup date is invalid.");
        return false;
    }
    if (proposedDropOffLocation == null || proposedDropOffLocation.isEmpty()) {
        System.out.println("Drop-off location is invalid.");
        return false;
    }

    // Check availability: ensure no booking already has the same pickup date
    for (String booking : bookings) {
        if (booking.contains(proposedPickupDate)) {
            System.out.println("Pickup date " + proposedPickupDate + " is already booked.");
            return false;
        }
    }

    
    return true;

       }

 



public void send_results()
      {

 public void send_results(String newUsername, String newPassword) {
        
        submittedUsernames.add(newUsername);  // Store the submitted Username!
        submittedPasswords.add(newPassword);  // Store the submitted Password!
}
      }

 

} // End of Manage Search


Public class ConfirmScreen{

      public void display()
      {
 frame = new JFrame("Confirm Screen");

        JLabel label = new JLabel("Are you sure you want to confirm?");
        JButton submitButton = new JButton("Submit"); // <-- The Submit button

        // When the button is clicked, run the final_submit() method
        submitButton.addActionListener(e -> final_submit());

        JPanel panel = new JPanel();
        panel.add(label);
        panel.add(submitButton);

        frame.add(panel);
        frame.setSize(300, 150);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
       }

       public final_submit()
       {
System.out.println("Submitting booking..."); 
 show_message();
 frame.dispose(); // Close the frame after submission

       }


    public void show_message(String message)
    {
 JOptionPane.showMessageDialog(null, "booking changed successfully");
    }  


} // End of Confirm Screen


public class PaymentScreen{


private int amount;
private string customer;

       public void display()
    {
frame = new JFrame("Payment Screen");

        
        JButton payButton = new JButton("Pay");

         payButton.addActionListener(e -> payment());
        JPanel panel = new JPanel();
        panel.add(label);
        panel.add(payButton);

        frame.add(panel);
        frame.setSize(300, 150);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    }

     public double return_cost()
     {

   return amount;

     }

    public void payment()
    {
ExternalPaymentScreen externalPayment = new ExternalPaymentScreen();
    externalPayment.display(); // open External Paymennt Screen

    // Optionally close the current payment screen
    frame.dispose();

    }

    public void show_message3(String message)
    {
 JOptionPane.showMessageDialog(null, "Error in Payment! Please try again or use another payment method!");
    }

public void show_message4() {
        JOptionPane.showMessageDialog(null, "New Cost is Less. No further payment needed!");
    }


 public void close message()
    {
 JFrame closeFrame = new JFrame("Close Message");
        JButton closeButton = new JButton("Close");

        closeButton.addActionListener(e -> closeFrame.dispose());

        JPanel panel = new JPanel();
        panel.add(new JLabel("Press to close message"));
        panel.add(closeButton);

        closeFrame.add(panel);
        closeFrame.setSize(250, 100);
        closeFrame.setLocationRelativeTo(null);
        closeFrame.setVisible(true);
        closeFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    }

 
} // end of PaymentScreen

public class Invalid Booking Screen {

 

     public void display()
    {
 private JFrame frame;

    public void display() {
        frame = new JFrame("Invalid Booking Screen");
        JLabel label = new JLabel("Invalid booking details.");
        JButton closeButton = new JButton("Close");

        closeButton.addActionListener(e -> frame.dispose());

        JPanel panel = new JPanel();
        panel.add(label);
        panel.add(closeButton);

        frame.add(panel);
        frame.setSize(300, 100);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
 
    }

     public void show_message5(String message)
     {
 JOptionPane.showMessageDialog(null, "Changes not Available!");
     }

    public void close_message()
   {
 JFrame closeFrame = new JFrame("Close Message");
        JButton closeButton = new JButton("Close");

        closeButton.addActionListener(e -> closeFrame.dispose());

        JPanel panel = new JPanel();
        panel.add(new JLabel("Press to close this message"));
        panel.add(closeButton);

        closeFrame.add(panel);
        closeFrame.setSize(250, 100);
        closeFrame.setLocationRelativeTo(null);
        closeFrame.setVisible(true);
        closeFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
   }


} // End of InvalidBookingScreen

public class ExternalPaymentScreen{

      public void display()
     {
frame = new JFrame("External Payment Screen");

        JLabel label = new JLabel("Proceed with Payment!");
        JButton confirmButton = new JButton("Confirm");

        // When user clicks "Confirm", complete the payment
        confirmButton.addActionListener(e -> confirm());

        JPanel panel = new JPanel();
        panel.add(label);
        panel.add(confirmButton);

        frame.add(panel);
        frame.setSize(300, 120);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

     }

      public void confirm()
    {
 JOptionPane.showMessageDialog(frame, "Payment completed successfully!");
        frame.dispose();
    }

} //end of ExternalPaymentScreen






public class DataSourceManager{

      private List<String> existingUsernames;
      private List<String> existingPasswords;
      private List<String> storedLocations; 

     private List<String> chosenBookings;

    
    public DataSourceManager() {  // Constructor to initialize the list
        chosenBookings = new ArrayList<>();
   }



// Constructor that receives usernames and passwords
  public DataSourceManager(List<String> usernames, List<String> passwords) {
        this.existingUsernames = usernames;
        this.existingPasswords = passwords;
    }

public boolean Username_Availability_Check()
{
  return !existingUsernames.contains(username);
}


public boolean Password_Availability_Check()
{
  return !existingPasswords.contains(password);
}


public void Save_new_ Username()
{
JFrame frame = new JFrame("Save New Username");

     
        JTextField usernameField = new JTextField(15);

        JButton saveButton = new JButton("Save");
        saveButton.addActionListener(e -> {
            String newUsername = usernameField.getText().trim();
            if (!newUsername.isEmpty()) {
                if (Username_Availability_Check(newUsername)) {
                    existingUsernames.add(newUsername);
                    JOptionPane.showMessageDialog(frame, "Username saved: " + newUsername);
                    frame.dispose();
}


 public void Save_New_Password()
{
JFrame frame = new JFrame("Save New Password");
 
    JPasswordField passwordField = new JPasswordField(15);

    JButton saveButton = new JButton("Save");
    saveButton.addActionListener(e -> {
        String newPassword = new String(passwordField.getPassword()).trim();
        if (!newPassword.isEmpty()) {
            if (Password_Availability_Check(newPassword)) {
                existingPasswords.add(newPassword);
                JOptionPane.showMessageDialog(frame, "Password saved.");
                frame.dispose();

}

public void Ask_For_Possible_Locations()
{
  JFrame frame = new JFrame("Stored Locations");
      StringBuilder builder = new StringBuilder();
       for (String location : storedLocations) { // loop for all stored locations
        builder.append(location).append("\n");
    }
      frame.setVisible(true); //window visible for User
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

}

 public void Save_New_Location()
{
if (!storedLocations.contains(newLocation)) {
        storedLocations.add(newLocation);
    }
}


  public void Send_kratiseis(List<String> bookings) {
        if (bookings != null) {
            chosenBookings.clear(); // Clear old bookings if any
            chosenBookings.addAll(bookings); // Store new bookings
        }
    }



public boolean Check_Availability_Validation(String changedBooking)
{
  // Example validation: check if the booking exists and changes are allowed
    if (changedBooking == null || changedBooking.isEmpty()) {
        return false; // Invalid input
    }

    // For demonstration, assume chosenBookings holds existing bookings
    // Check if changedBooking is not conflicting with existing bookings
    for (String booking : chosenBookings) {
        if (booking.equals(changedBooking)) {
            return false; // Change conflicts with an existing booking
        }
    }

    // If no conflicts found, assume change is valid and available
    return true;

}

public void Save_New_Kratisi()
{
 if (!Check_Availability_Validation(newBooking)) {
        JOptionPane.showMessageDialog(null, "This booking is not valid or already exists.");
        return;
    }

    chosenBookings.add(newBooking);
    JOptionPane.showMessageDialog(null, "Booking saved successfully!");

}


private double currentBalance ;
private double lastEvaluatedCost;

public double evaluate_cost(String changeDetails) 
{
lastEvaluatedCost = computeCostBasedOn(changeDetails);

    return lastEvaluatedCost;
}

public void Save_New_Balance()
{
if (currentBalance >= lastEvaluatedCost) {
        currentBalance -= lastEvaluatedCost;
        JOptionPane.showMessageDialog(null, "Balance updated. New balance: " + currentBalance + "€");
    } else {
        JOptionPane.showMessageDialog(null, "Insufficient balance to apply changes.");
    }
}




}   // End of DataSourceManager












 

