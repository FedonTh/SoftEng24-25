public class MainScreen {

     public void Edit_Kratisi()
      {
    EditKratisiScreen screen = new EditKratisiScreen();
        screen.display(); // This opens the new screen
      }


} //End of  MainScreen






public class BookingScreen {

 private JFrame frame;
    private JComboBox<String> comboBox;
    private List<String> bookings = new ArrayList<>();

     public void display()
    {
frame = new JFrame("Booking Screen");
        JLabel label = new JLabel("Choose a booking:");

        comboBox = new JComboBox<>(); // Empty initially

        JButton submitButton = new JButton("Submit");
        submitButton.addActionListener(e -> chooses_kratisi_and_submit());

        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.add(label);
        panel.add(comboBox);
        panel.add(submitButton);

        frame.add(panel);
        frame.setSize(300, 200);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  }

    public chooses_kratisi_and_submit()
     {  
 // Split the input string by commas and fill the combo box
        String[] items = kratisi.split(",");
        bookings.clear();
        comboBox.removeAllItems();

        for (String item : items) {
            bookings.add(item.trim());
            comboBox.addItem(item.trim());
        }

     }

   
 
     public send_results(String kratisi) 
      {

 // Split the input string by commas and fill the combo box
        String[] items = kratisi.split(",");
        bookings.clear();
        comboBox.removeAllItems();

        for (String item : items) {
            bookings.add(item.trim());
            comboBox.addItem(item.trim());
        }

      }

}  // End of BookingScreen





public class EditBookingScreen {

 private JFrame frame;
    private JTextField pickupDateField;
    private JTextField dropOffLocationField;

     public void display()
    {

  frame = new JFrame("Edit Booking Screen"); // New Screen name

        JLabel label1 = new JLabel("New Pickup Date:");
        pickupDateField = new JTextField(15);

        JLabel label2 = new JLabel("New Drop-off Location:");
        dropOffLocationField = new JTextField(15);

        JButton submitButton = new JButton("Submit Changes");
        submitButton.addActionListener(e -> chooses_changes_and_submit());

        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.add(label1);
        panel.add(pickupDateField);
        panel.add(label2);
        panel.add(dropOffLocationField);
        panel.add(submitButton);

        frame.add(panel);
        frame.setSize(300, 250);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

     public chooses_changes_and_submit()
    {
   String newPickupDate = pickupDateField.getText();
        String newDropOffLocation = dropOffLocationField.getText();

        // Very simple: just print or use these values
        System.out.println("New Pickup Date: " + newPickupDate);
        System.out.println("New Drop-off Location: " + newDropOffLocation);

        // Optionally close the window
        frame.dispose();

    }



} // End of Edit Booking Screen






public class ManageSearch {


 private List<String> bookings = new ArrayList<>();
    private String proposedPickupDate;
    private String proposedDropOffLocation;

       public void ask_for_kratiseis()
     {
  System.out.println("Stored bookings:");
        for (String booking : bookings) {
            System.out.println(booking);
        }

     }

    public void send_changes(String newPickupDate, String newDropOffLocation) 
{
        // Store the proposed changes
        this.proposedPickupDate = newPickupDate;
        this.proposedDropOffLocation = newDropOffLocation;

        System.out.println("Received proposed changes:");
        System.out.println("New Pickup Date: " + newPickupDate);
        System.out.println("New Drop-off Location: " + newDropOffLocation);
    }


          public boolean valid_and_available()
         {
 // Check if proposed changes are not null or empty
    if (proposedPickupDate == null || proposedPickupDate.isEmpty()) {
        System.out.println("Pickup date is invalid.");
        return false;
    }
    if (proposedDropOffLocation == null || proposedDropOffLocation.isEmpty()) {
        System.out.println("Drop-off location is invalid.");
        return false;
    }

    // Check availability: ensure no booking already has the same pickup date
    for (String booking : bookings) {
        if (booking.contains(proposedPickupDate)) {
            System.out.println("Pickup date " + proposedPickupDate + " is already booked.");
            return false;
        }
    }

    
    return true;

       }

 



public void send_results()
      {
      }

 

} // End of Manage Search


Public class ConfirmScreen{

      public void display()
      {
 frame = new JFrame("Confirmation Screen");

        JLabel label = new JLabel("Are you sure you want to confirm?");
        JButton submitButton = new JButton("Submit"); // <-- The Submit button

        // When the button is clicked, run the final_submit() method
        submitButton.addActionListener(e -> final_submit());

        JPanel panel = new JPanel();
        panel.add(label);
        panel.add(submitButton);

        frame.add(panel);
        frame.setSize(300, 150);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
       }

       public final_submit()
       {
System.out.println("Submitting booking..."); 
 show_message();
 frame.dispose(); // Close the frame after submission

       }


    public void show_message(String message)
    {
 JOptionPane.showMessageDialog(null, "booking changed successfully");
    }  


} // End of Confirmation Screen


public class PaymentScreen{

       public void display()
    {
    }

     public double return_cost()
     {
     }

    public void payment()
    {
    }

    public void close message()
    {
    }

    public void show_message(String message)
    {
    }
  

 
} // end of PaymentScreen

public class Invalid Booking Screen {

     public void display()
    {
    }

     public void show_message(String message)
     {
     }

    public void close_message()
   {
   }


} // End of InvalidBookingScreen

public class ExternalPaymentScreen{

      public void display()
     {
     }

      public void confirm()
    {
    }

} //end of ExternalPaymentScreen

 

